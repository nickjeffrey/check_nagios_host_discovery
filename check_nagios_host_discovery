#!/usr/bin/perl -w
#
#
#

# OUTSTANDING TASKS
# -----------------
#  1) build a config file containing site-specific details for subnets, hostnames, exclusions



# DESCRIPTION
# -----------
# script to discover newly created hosts that have not been added to nagios monitoring





# CHANGE LOG
# ----------
#  2023/03/08   njeffrey        Script created
#  2021/05/14   njeffrey        Add $snmp_parameters variable to hold flags for snmpget



# NOTES
# -----
#
#  This script should return one (and only one) line of ouput.  Multiple lines of output are silently ignored by nagios.
#
#  The line of output will become the body of the alert message sent by nagios
#
#
#  You will need a section in the services.cfg
#  file on the nagios server that looks similar to the following.
#   # run a ping scan for new hosts that have not yet been added to nagios monitoring
#   define service{
#           use                             generic-service
#           host_name                       mynagioshost.example.com
#           service_description             nagios host discovery
#           check_command                   check_nagios_host_discovery
#           notification_period             8x5			; only alert Mon-Fri 8am-5pm
#           check_interval                  720  		; only check once every 720 minutes
#           }
#
#  You will need a section in the commands.cfg
#  file on the nagios server that looks similar to the following.
#     # ---------------------------------------------------------------------------
#     # 'check_nagios_host_discovery' command definition
#     define command{
#             command_name    check_nagios_host_discovery
#             command_line    $USER1$/check_nagios_host_discovery
#             }
#
#
#



use strict;					#enforce good coding practices
use Getopt::Long;                               #allow --long-switches to be used as parameters


# declare variables
my (%ipaddr,@subnets,$subnet,$nmap,$host,$cmd,$key,$verbose);
my ($OK,$WARN,$CRITICAL,$UNKNOWN);
my ($CHECK_NAME,$output_filename,$output_message,$output_file_age);
my ($opt_h,$opt_v);
my (@nagios_host_files,$file,@nagios_hosts,$nagios_host);
my ($defined_hosts,$undefined_hosts);
my (@excluded_hosts,$excluded_host);
my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,$blksize,$blocks);


@subnets        = ("192.168.14.0/24","10.10.30.0/24");
#@subnets        = ("192.168.14.1-100");
@excluded_hosts = ("192.168.14.38","192.168.14.39","192.168.14.52","192.168.14.53");	#even if these hosts respond to ping, we want to exclude them from nagios monitoring
$nmap           = "/bin/nmap";
$host           = "/bin/host";  #translates IP address to hostname
$verbose        = "no";
$CHECK_NAME     = "nagios host discovery";


#
# Nagios return codes
#
$OK       = 0;
$WARN     = 1;
$CRITICAL = 2;
$UNKNOWN  = 3;



sub get_options {
   #
   # this gets the command line parameters provided by the users
   print "running get_options subroutine \n" if ($verbose eq "yes");
   #
   Getopt::Long::Configure('bundling');
   GetOptions(
      "h"   => \$opt_h, "help"        => \$opt_h,
      "v"   => \$opt_v, "verbose"     => \$opt_v,
   );
   #
   # If the user supplied -v or --verbose switch, increase script output verbosity for debugging
   if( defined( $opt_v ) ) {
      $verbose = "yes";
   }
   # If the user supplied -h or --help switch, show help and exit
   if( defined( $opt_h ) ) {
      print "Usage:  $0 --help    \n";
      print "        $0 --verbose \n";
      exit;
   }
}       						#end of subroutien




sub sanity_checks {
   #
   print "running sanity_checks subroutine \n" if ($verbose eq "yes");
   #
   #
   #
   # Confirm required files exist
   #
   if ( ! -f "$nmap" ) {
      print "ERROR: Cannot find $nmap \n";
      exit;
   }
   if ( ! -x "$nmap" ) {
      print "ERROR: $nmap is not executable by the current user\n";
      exit;
   }
   if ( ! -f "$host" ) {
      print "ERROR: Cannot find $host \n";
      exit;
   }
   if ( ! -x "$host" ) {
      print "ERROR: $host is not executable by the current user\n";
      exit;
   }
}       						#end of subroutien



sub check_for_output_file {
   #
   # a cron job may have already created the output file that we need
   #
   print "running check_for_output_file subroutine \n" if ($verbose eq "yes");
   #
   $output_filename = "/tmp/nagios.check_nagios_host_discovery.tmp";
   #
   # delete the output file if it is more than 86400 seconds old
   if ( -e $output_filename ) {                                 #see if a cron job has already provided the info we need
      ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,$blksize,$blocks) = stat($output_filename); #get last modification time in seconds since the epoch
      $output_file_age = time - $mtime;                                 #figure out how many seconds old the file is
      print "   output file $output_filename is $output_file_age seconds old \n" if ($verbose eq "yes");
      if( $output_file_age > 86400 ) {                                   #see if the file is more than 3600 seconds old
         print "   deleting old copy of $output_filename \n" if ($verbose eq "yes");
         unlink "$output_filename";                                     #delete the file if it is too old
      }
   }                                                                    #end of if block
   #
   if ( -e "$output_filename" ) {                               #see if a cron job has already provided the info we need
      open (OUT,"$output_filename") or die "Cannot open $output_filename for reading $! \n";
      while (<OUT>) {                                                   #read a line from the text file
         $output_message = $_  if ( $_ =~ /[a-zA-Z]/);                  #get the content of the output file into a variable
      }                                                                 #end of while loop
      close OUT;                                                        #close filehandle
      print $output_message;                                            #print the content of the output file
      exit $CRITICAL if ( $output_message =~ /CRITICAL/ );              #exit script with appropriate return code
      exit $WARN     if ( $output_message =~ /WARN/ );                  #exit script with appropriate return code
      exit $UNKNOWN  if ( $output_message =~ /UNKNOWN/ );               #exit script with appropriate return code
      exit $OK       if ( $output_message =~ /OK/ );                    #exit script with appropriate return code
   }                                                                    #end of if block
}                                                                       #end of subroutine




sub print_to_outputfile {
   #
   print "running print_to_outputfile \n" if ($verbose eq "yes");
   #
   # This subroutine is called whenever an output message is printed, to confirm that the $output_file exists
   #
   # confirm the output message exists
   $output_message = "$CHECK_NAME UNKNOWN - could not parse response from remote host \n" unless ($output_message);
   #
   # confirm the $output_filename variable is defined
   unless ($output_filename) {
      print "$CHECK_NAME UNKNOWN - the \$output_filename variable is not defined.  This might be a script bug. \n";
      exit $UNKNOWN;                                                            #only get this far if OK/WARN/CRITICAL/UNKNOWN was not found in the output file
   }                                                                            #end of unless block
   #
   if ( ! -e "$output_filename" ) {                                                     #only run this section if $output_filename does not already exist
      print "   $output_filename not found - writing output message to $output_filename \n" if ($verbose eq "yes");
      open (OUT,">$output_filename") or die "Cannot open $output_filename for writing: $! \n";
      print OUT "$output_message";
      close OUT;                                                                #close filehandle
   }                                                                            #end of if block
}




sub ping_scan {
   #
   print "running ping_scan subroutine \n" if ($verbose eq "yes");
   #
   # Sample command output:
   #Nmap scan report for 192.168.14.1
   #Host is up (0.00044s latency).
   #Nmap scan report for 192.168.14.2 [host down]
   #Nmap scan report for 192.168.14.3 [host down]

   # run a ping scan of all the subnets
   foreach $subnet (@subnets) {
      $cmd = "$nmap -v -sn -n $subnet 2>&1";
      print "   running command: $cmd \n" if ($verbose eq "yes");
      open(IN,"$cmd |");                 		  		#open a filehandle for reading
      while (<IN>) {                               			#read a line from STDIN
         next if (/^Starting Nmap/);					#skip header line
         next if (/^Initiating/);					#skip header line
         next if (/^Scanning/);						#skip header line
         next if (/^Read data files/);					#skip header line
         next if (/^Nmap done/);					#skip header line
         next if (/host down/);						#skip any lines that report the IP address is not responding to ping
         if ( /Nmap scan report for ([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)/ ) {      
            $ipaddr{$1}{ipaddr} = $1;					#add IP address to hash
            $ipaddr{$1}{state} = "up";					#add IP address to hash
            print "   IP address $ipaddr{$1}{ipaddr} is $ipaddr{$1}{state} \n" if ($verbose eq "yes");                      	
         }                                        		 	#end of if block
      }                                            			#end of while loop
      close IN;                                    			#close filehandle
   }									#end of foreach loop
}       								#end of subroutien




sub get_hostnames {
   #
   print "running get_hostnames subroutine \n" if ($verbose eq "yes");
   #
   # Sample command output
   # $ host 192.168.14.111
   # 1.14.168.192.in-addr.arpa domain name pointer router01.example.com.
   # $ host 192.168.14.113
   # Host 113.14.168.192.in-addr.arpa. not found: 3(NXDOMAIN)

   # At this point, we have found all the IP addresses that respond to ping
   # Now we will see if those IP addresses have associated hostnames
   foreach $key (sort keys %ipaddr) {
      next unless ( $ipaddr{$key}{state} eq "up" );			#confirm the IP address responds to ping
      $ipaddr{$key}{hostname_fqdn}     = "IPaddr_not_in_DNS";		#initialize with dummy value to avoid undef errors
      $ipaddr{$key}{hostname}          = "IPaddr_not_in_DNS";		#initialize with dummy value to avoid undef errors
      $ipaddr{$key}{defined_in_nagios} = "unknown";			#initialize with dummy value to avoid undef errors
      $cmd = "$host $ipaddr{$key}{ipaddr} ";
      print "   running command: $cmd \n" if ($verbose eq "yes");
      open(IN,"$cmd 2>&1 |");                  				#open a filehandle for reading
      while (<IN>) {                               			#read a line from STDIN
         if (/domain name pointer ([a-zA-Z0-9\-\.]+)\./) {		#match hostname including DNS suffix
            $ipaddr{$key}{hostname_fqdn} = $1;
            print "   IP address $ipaddr{$key}{ipaddr} matches to FQDN  hostname $ipaddr{$key}{hostname_fqdn} \n" if ($verbose eq "yes");                      	
         }								#end of if block
         if (/domain name pointer ([a-zA-Z0-9\-]+)/) {			#match hostname up to the first . character, skipping DNS suffix
            $ipaddr{$key}{hostname} = $1;
            print "   IP address $ipaddr{$key}{ipaddr} matches to short hostname $ipaddr{$key}{hostname} \n" if ($verbose eq "yes");                      	
         }								#end of if block
         if (/NXDOMAIN/) {						#IP address is not in DNS
            $ipaddr{$key}{hostname_fqdn} = "IPaddr_not_in_DNS";		#dummy value to avoid undef errors
            $ipaddr{$key}{hostname}      = "IPaddr_not_in_DNS";		#dummy value to avoid undef errors
            print "   IP address $ipaddr{$key}{ipaddr} not found in DNS \n" if ($verbose eq "yes");                      	
         }								#end of if block
      }									#end of while loop
      close IN;								#close filehandle
   }									#end of foreach loop
}       								#end of subroutien




sub remove_excluded_hosts {
   #
   print "running remove_excluded_hosts subroutine \n" if ($verbose eq "yes");
   #
   # At this point, we have a list of detected IP addresses and hostnames.
   # There may be some IP addresses or hostnames that we intentionally do not want to monitor via nagios (ie dev/test boxes)
   # Remove any detected hosts that we do not want to be monitored by nagios
   #
   foreach $key (sort keys %ipaddr) {
      next unless ( $ipaddr{$key}{state} eq "up" );			#confirm the IP address responds to ping
      foreach $excluded_host (@excluded_hosts) {
         next unless $excluded_host;					#skip blank array elements
         if ( ($ipaddr{$key}{ipaddr} eq $excluded_host) || ($ipaddr{$key}{hostname_fqdn} eq $excluded_host) || ($ipaddr{$key}{hostname} eq $excluded_host) ) {
            print "   removing excluded host $excluded_host from list of detected IP addresses / hostnames \n" if ($verbose eq "yes");
            $ipaddr{$key}{state} = "excluded";				#change the state of the IP address from up to excluded, causing the rest of the scrip to ignroe this IP address
         } 								#end of if block
      }									#end of foreach loop
   }									#end of foreach loop
}       								#end of subroutien




sub get_hosts_defined_in_nagios {
   #
   print "running get_hosts_defined_in_nagios subroutine \n" if ($verbose eq "yes");
   #
   # This subroutine looks in the nagios config files to see what hosts have already been defined
   #
   @nagios_host_files = glob "/usr/local/nagios/etc/objects/hosts*.cfg";
   foreach $file (@nagios_host_files) {
      print "   reading file $file \n" if ($verbose eq "yes"); 
      open(IN,"$file ") or warn "Cannot open $file for reading $! \n";	#open a filehandle for reading
      while (<IN>) {                               			#read a line from STDIN
         if (/host_name\s+([a-zA-Z0-9_\-\.]+)/) {
            push (@nagios_hosts,$1);
            print "   found host_name $1 \n" if ($verbose eq "yes");
         } 								#end of if block
         if (/address\s+([a-zA-Z0-9_\-\.]+)/) {
            push (@nagios_hosts,$1);
            print "   found address $1 \n" if ($verbose eq "yes");
         } 								#end of if block
      }									#end of while loop
      close IN;								#close filehandle
   }									#end of foreach loop
}       								#end of subroutien




sub compare_detected_hosts_to_defined_hosts {
   #
   print "running compare_detected_hosts_to_defined_hosts subroutine \n" if ($verbose eq "yes");
   #
   # This subroutine looks at the list of detected IP addresses fromt he ping_scan subroutine, 
   # and compares to the list of hosts defined in nagios int he @nagios_hosts array.
   #
   foreach $key (sort keys %ipaddr) {
      next unless ( $ipaddr{$key}{state} eq "up" );			#confirm the IP address responds to ping
      $ipaddr{$key}{defined_in_nagios} = "no";				#initialize hash element
      print "   checking detected host $ipaddr{$key}{ipaddr} $ipaddr{$key}{hostname} for existing nagios host definition: \n" if ($verbose eq "yes");
      foreach $nagios_host (@nagios_hosts) {
         if ( ($nagios_host eq $ipaddr{$key}{ipaddr}) || ($nagios_host eq $ipaddr{$key}{hostname_fqdn})  || ($nagios_host eq $ipaddr{$key}{hostname}) ) {
            $ipaddr{$key}{defined_in_nagios} = "yes";				#initialize hash element
            print "      found nagios host definition for $ipaddr{$key}{ipaddr} $ipaddr{$key}{hostname} \n" if ($verbose eq "yes");
         }								#end of if block
      }									#end of foreach loop
   }									#end of foreach loop
}       								#end of subroutien




sub print_output {
   #
   print "running print_output subroutine \n" if ($verbose eq "yes");
   #
   $defined_hosts   = 0;						#initialize counter variable
   $undefined_hosts = 0;						#initialize counter variable
   foreach $key (sort keys %ipaddr) {
      next unless ( $ipaddr{$key}{state} eq "up" );			#confirm the IP address responds to ping
      if ($ipaddr{$key}{defined_in_nagios} eq "yes") { 			
         $defined_hosts++;						#increment counter variable
         print "   found   defined host $ipaddr{$key}{ipaddr} $ipaddr{$key}{hostname} \n" if ($verbose eq "yes");
      } 								#end of if block
      if ($ipaddr{$key}{defined_in_nagios} eq "no") { 			
         $undefined_hosts++;						#increment counter variable
         print "   found undefined host $ipaddr{$key}{ipaddr} $ipaddr{$key}{hostname} \n" if ($verbose eq "yes");
      } 								#end of if block
   }									#end of foreach loop
   
   if ( $defined_hosts == 0 ) {
      $output_message = "$CHECK_NAME UNKNOWN - could not find any defined nagios hosts, please check nagios .cfg files \n";
      print "$output_message";						#print output to screen
      print_to_outputfile;           					#call subroutine to confirm the output is in the $output_filename used for subsequent script runs
      exit $UNKNOWN;
   }
   
   if ( $undefined_hosts >= 1 ) {
      $output_message = "$CHECK_NAME WARN - the following IP addresses were detected, but do not have corresponding nagios host definitions.  Please add these hosts to nagios monitoring: ";
      foreach $key (sort keys %ipaddr) {
         if ($ipaddr{$key}{defined_in_nagios} eq "no") {
            $output_message = "$output_message $ipaddr{$key}{ipaddr} $ipaddr{$key}{hostname}, ";
         }								#end of if block
      }									#end of foreach loop
      $output_message = "$output_message \n"; 				#add newline to end of message
      print "$output_message";						#print output to screen
      print_to_outputfile;           					#call subroutine to confirm the output is in the $output_filename used for subsequent script runs
      exit $WARN;
   }

   if ( $undefined_hosts == 0 ) {
      $output_message = "$CHECK_NAME OK - all detected IP addresses are already defined as nagios hosts \n";
      print "$output_message";						#print output to screen
      print_to_outputfile;           					#call subroutine to confirm the output is in the $output_filename used for subsequent script runs
      exit $OK;
   }
}       								#end of subroutien




# ----------------------- main body of program -------------------------------
get_options;
sanity_checks;
check_for_output_file;
ping_scan;
get_hostnames;
remove_excluded_hosts;
get_hosts_defined_in_nagios;
compare_detected_hosts_to_defined_hosts;
print_output;
